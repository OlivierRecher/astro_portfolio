---
import "./style.css";
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script
      is:inline 
      src="https://www.gstatic.com/charts/loader.js"
      onload="google.charts.load('current', {'packages':['corechart']});"
    />
    </head>
  <body>
    <div class="trainPage">
      <div class="trainTitle">
        <div class="backButton">
          <button
            class="button"
            onclick="window.location.href='/project/doodle/'">&lt;</button>
        </div>
        <h2 class="title">Entrainements</h2>
      </div>
      <div class="trainButton">
        <button class="button" id="saveJson">Save JSON</button>
      </div>
      <div class="chartContent">
        <div id="chart"></div>
      </div>
      <div id="trainingZone"></div>
    </div>

    <script type="module" is:inline>
      import { Controller } from "/src/components/doodle/controller/Controller.js";
      import { Canva } from "/src/components/doodle/model/Canva.js";
      import {
        historyMaxValue,
        historyAverage,
        getFinalValues,
      } from "/src/components/doodle/model/data.js";
      import { drawChart } from "/src/components/doodle/view/Chart.js";
      import { reproduction } from "/src/components/doodle/controller/ReproductionController.js";

      const results = [];
      document
        .getElementById("saveJson")
        .addEventListener("click", () => toJSon(getFinalValues()));

      async function initializeCanvases() {
        const canvaContentTmp = document.querySelectorAll(".canvaContent");
        if (canvaContentTmp.length > 0) {
          for (let i = 0; i < canvaContentTmp.length; i++) {
            canvaContentTmp[i].remove();
          }
        }

        const promises = [];
        const trainingZone = document.querySelector("#trainingZone");

        for (let i = 0; i < 75; i++) {
          const canvaContent = document.createElement("div");
          canvaContent.classList.add("canvaContent");
          const canvas = document.createElement("canvas");
          canvas.id = `my_canvas_${i}`;
          canvas.width = Canva.WIDTH;
          canvas.height = Canva.HEIGHT;
          canvaContent.appendChild(canvas);
          trainingZone.appendChild(canvaContent);
          promises.push(initializeCanvas(canvas, getFinalValues()[i]));
        }

        const results = await Promise.all(promises); // Exécuter toutes les instances en parallèle
        results.sort((a, b) => b.score - a.score);
        reproduction(results);
        drawChart(historyAverage, historyMaxValue);
        initializeCanvases();
      }

      async function initializeCanvas(canvas, data = null) {
        const HEXTILES_IMAGE = new Image();
        HEXTILES_IMAGE.src = "/src/assets/doodle/game-tiles.png";

        await new Promise((resolve) => {
          HEXTILES_IMAGE.addEventListener("load", () => {
            resolve();
          });
        });

        const app = new Controller(HEXTILES_IMAGE, data, canvas.id, true);
        const result = await app.update(); // Attendre que le jeu se termine
        results.push(result);
        return result;
      }

      function toJSon(json) {
        const jsonResults = JSON.stringify(json, null, 2);
        const blob = new Blob([jsonResults], { type: "application/json" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "result.json";
        a.click();
        URL.revokeObjectURL(url);
      }

      initializeCanvases();
    </script>
  </body>
</html>
